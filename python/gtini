#!/usr/bin/python

import datetime
from flytec import Flytec, POSIXSerialIO
import logging
import optparse
import os
import pango
import pygtk
import re
import tempfile
import utc
import zipfile
pygtk.require('2.0')
import gtk
import gobject

#
# Page
#

class Page(gtk.Frame):

  def __init__(self, widget):
    gtk.Frame.__init__(self)
    scrolled_window = gtk.ScrolledWindow()
    scrolled_window.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    scrolled_window.add_with_viewport(widget)
    self.add(scrolled_window)

#
# AboutView
#

class AboutView(gtk.Table):

  def __init__(self, flytec):
    gtk.Table.__init__(self, 4, 2)
    self.flytec = flytec
    self.attach(gtk.Label('Instrument'), 0, 1, 0, 1)
    self.instrument_label = gtk.Label()
    self.attach(self.instrument_label, 1, 2, 0, 1)
    self.attach(gtk.Label('Pilot name'), 0, 1, 1, 2)
    self.pilot_name_label = gtk.Label()
    self.attach(self.pilot_name_label, 1, 2, 1, 2)
    self.serial_number_label = gtk.Label()
    self.attach(gtk.Label('Serial number'), 0, 1, 2, 3)
    self.attach(self.serial_number_label, 1, 2, 2, 3)
    self.software_version_label = gtk.Label()
    self.attach(gtk.Label('Software version'), 0, 1, 3, 4)
    self.attach(self.software_version_label, 1, 2, 3, 4)
    self.connect_after('realize', self.after_realize)

  def after_realize(self, data):
    self.instrument_label.set_text('%s %s' % (self.flytec.manufacturer[2], self.flytec.instrument))
    self.pilot_name_label.set_text(self.flytec.pilot_name)
    self.serial_number_label.set_text(self.flytec.serial_number)
    self.software_version_label.set_text(self.flytec.software_version)

#
# TracksTreeView
#

class TracksTreeView(gtk.TreeView):

  def __init__(self, flytec):
    gtk.TreeView.__init__(self)
    self.flytec = flytec
    self.set_rubber_banding(True)
    self.set_rules_hint(True)
    self.get_selection().set_mode(gtk.SELECTION_MULTIPLE)
    types = []
    types.extend([gobject.TYPE_PYOBJECT])
    types.extend([gobject.TYPE_STRING, gobject.TYPE_INT])
    types.extend([gobject.TYPE_STRING, gobject.TYPE_INT])
    types.extend([gobject.TYPE_STRING])
    self.set_model(gtk.ListStore(*types))
    column = gtk.TreeViewColumn('Date & time', gtk.CellRendererText(), text=1)
    column.set_sort_column_id(2)
    self.append_column(column)
    column = gtk.TreeViewColumn('Duration', gtk.CellRendererText(), text=3)
    column.set_sort_column_id(4)
    self.append_column(column)
    column = gtk.TreeViewColumn('IGC filename', gtk.CellRendererText(), text=5)
    column.set_sort_column_id(5)
    self.append_column(column)
    self.connect_after('realize', self.after_realize)

  def after_realize(self, data):
    model = self.get_model()
    model.freeze_notify()
    try:
      for track in self.flytec.pbrtl():
	timedelta = track.datetime - datetime.datetime(2000, 1, 1, tzinfo=utc.UTC())
	intdatetime = 24 * 60 * 60 * timedelta.days + timedelta.seconds
	intduration = 24 * 60 * 60 * track.duration.days + track.duration.seconds
	model.append(row=[track, str(track.datetime), intdatetime, str(track.duration), intduration, track.igc_filename])
    finally:
      model.thaw_notify()
    self.columns_autosize()

  def iselected_tracks(self):
    model, pathlist = self.get_selection().get_selected_rows()
    for path in pathlist:
      track, = model.get(model.get_iter(path), 0)
      yield track

#
# TracksView
#

class TracksView(gtk.HBox):

  def __init__(self, flytec):
    gtk.HBox.__init__(self)
    self.flytec = flytec
    self.tracks_tree_view = TracksTreeView(self.flytec)
    self.pack_start(self.tracks_tree_view)
    button_box = gtk.VButtonBox()
    button = gtk.Button(stock=gtk.STOCK_SAVE)
    button.connect('clicked', self.on_save)
    button_box.pack_start(button)
    button = gtk.Button('Create ZIP file...')
    button.connect('clicked', self.on_create_zip_file)
    button_box.pack_start(button)
    self.pack_end(button_box, False)

  def on_save(self, data):
    for track in self.tracks_tree_view.iselected_tracks():
      (fd, path) = tempfile.mkstemp(dir='')
      for line in track.igc: os.write(fd, line)
      os.close(fd)
      os.rename(path, track.igc_filename)

  def on_create_zip_file(self, data):
    dialog = gtk.FileChooserDialog('Create ZIP file', None, gtk.FILE_CHOOSER_ACTION_SAVE, (gtk.STOCK_CANCEL, gtk.RESPONSE_CANCEL, gtk.STOCK_SAVE, gtk.RESPONSE_ACCEPT))
    dialog.set_default_response(gtk.RESPONSE_ACCEPT)
    filter = gtk.FileFilter()
    filter.name = "ZIP files"
    filter.add_mime_type('application/zip')
    dialog.add_filter(filter)
    if dialog.run() == gtk.RESPONSE_ACCEPT:
      zf = zipfile.ZipFile(dialog.get_filename(), 'w')
      for track in self.tracks_tree_view.iselected_tracks():
	ntf = tempfile.NamedTemporaryFile()
	for line in track.igc: ntf.write(line)
	ntf.flush()
	zf.write(ntf.name, track.igc_filename)
      zf.close()
    dialog.destroy()

#
# WaypointsView
#

class WaypointsView(gtk.TreeView):

  def __init__(self, flytec):
    gtk.TreeView.__init__(self)
    self.flytec = flytec
    self.set_rubber_banding(True)
    self.set_rules_hint(True)
    self.get_selection().set_mode(gtk.SELECTION_MULTIPLE)
    self.set_model(gtk.ListStore(gobject.TYPE_PYOBJECT, gobject.TYPE_STRING, gobject.TYPE_STRING, gobject.TYPE_STRING, gobject.TYPE_INT, gobject.TYPE_STRING, gobject.TYPE_INT, gobject.TYPE_INT))
    crt = gtk.CellRendererText()
    crt.set_property('family', 'monospace')
    column = gtk.TreeViewColumn('Short name', crt, text=1)
    column.set_sort_column_id(1)
    self.append_column(column)
    column = gtk.TreeViewColumn('Name', gtk.CellRendererText(), text=2)
    column.set_sort_column_id(2)
    self.append_column(column)
    column = gtk.TreeViewColumn('Latitude', gtk.CellRendererText(), text=3)
    column.set_sort_column_id(4)
    self.append_column(column)
    column = gtk.TreeViewColumn('Longitude', gtk.CellRendererText(), text=5)
    column.set_sort_column_id(6)
    self.append_column(column)
    column = gtk.TreeViewColumn('Altitude', gtk.CellRendererText(), text=7)
    column.set_sort_column_id(7)
    self.append_column(column)
    self.connect_after('realize', self.after_realize)

  def after_realize(self, data):
    model = self.get_model()
    model.freeze_notify()
    try:
      for waypoint in self.flytec.pbrwps():
	deg, mmin = divmod(abs(waypoint.lat), 60000)
	min, mmin = divmod(mmin, 1000)
	if waypoint.lat < 0: hemi = 'S'
	else: hemi = 'N'
	lat = '%02d\xc2\xb0 %02d.%03d\xe2\x80\xb2 %s' % (deg, min, mmin, hemi)
	deg, mmin = divmod(abs(waypoint.lon), 60000)
	min, mmin = divmod(mmin, 1000)
	if waypoint.lon < 0: hemi = 'W'
	else: hemi = 'E'
	lon = '%03d\xc2\xb0 %02d.%03d\xe2\x80\xb2 %s' % (deg, min, mmin, hemi)
	model.append(row=[waypoint, waypoint.short_name, waypoint.long_name, lat, waypoint.lat, lon, waypoint.lon, waypoint.alt])
    finally:
      model.thaw_notify()
    self.columns_autosize()

#
# RoutesView
#

class RoutesView(gtk.TreeView):

  def __init__(self, flytec):
    gtk.TreeView.__init__(self)
    self.flytec = flytec
    self.set_model(gtk.TreeStore(gobject.TYPE_PYOBJECT, gobject.TYPE_STRING, gobject.TYPE_STRING))
    column = gtk.TreeViewColumn('Name', gtk.CellRendererText(), text=1)
    self.append_column(column)
    crt = gtk.CellRendererText()
    crt.set_property('family', 'monospace')
    column = gtk.TreeViewColumn('Short name', crt, text=2)
    column.set_sort_column_id(2)
    self.append_column(column)
    self.connect_after('realize', self.after_realize)

  def after_realize(self, data):
    model = self.get_model()
    model.freeze_notify()
    try:
      for route in self.flytec.pbrrts():
	iter = model.append(None, row=[route, route.name, None])
	for routepoint in route.routepoints:
	  model.append(iter, row=[routepoint, routepoint.long_name, routepoint.short_name])
    finally:
      model.thaw_notify()
    self.columns_autosize()

#
# LogBuffer
#

class LogBuffer(gtk.TextBuffer):

  def __init__(self, flytec):
    gtk.TextBuffer.__init__(self)
    self.read_tag = self.create_tag(None, family='monospace')
    self.write_tag = self.create_tag(None, family='monospace', weight=pango.WEIGHT_BOLD)
    handler = logging.Handler()
    handler.emit = self.emit
    flytec.io.logger.addHandler(handler)

  def emit(self, record):
    if record.__dict__.has_key('direction') and not record.__dict__.has_key('x'):
      text = re.compile(r'\\r\\n\Z').sub('', record.msg % record.args)
      if record.direction == 'read':
	self.insert_with_tags(self.get_end_iter(), text + "\n", self.read_tag)
      else:
	self.insert_with_tags(self.get_end_iter(), text + "\n", self.write_tag)

#
# LogView
#

class LogView(gtk.TextView):

  def __init__(self, flytec):
    gtk.TextView.__init__(self, LogBuffer(flytec))
    self.set_editable(False)
    buffer = self.get_buffer()
    self.end_mark = buffer.create_mark(None, buffer.get_end_iter(), False)
    buffer.connect('changed', self.on_changed)

  def on_changed(self, data):
    self.scroll_mark_onscreen(self.end_mark)

#
# MainWindow
#

class MainWindow(gtk.Window):

  def __init__(self, flytec):
    gtk.Window.__init__(self, gtk.WINDOW_TOPLEVEL)
    self.flytec = flytec
    self.set_default_size(640, 480)
    vbox = gtk.VBox()
    notebook = gtk.Notebook()
    notebook.append_page(Page(TracksView(self.flytec)), gtk.Label('Tracks'))
    notebook.append_page(Page(WaypointsView(self.flytec)), gtk.Label('Waypoints'))
    notebook.append_page(Page(RoutesView(self.flytec)), gtk.Label('Routes'))
    notebook.append_page(Page(AboutView(self.flytec)), gtk.Label('About'))
    notebook.append_page(Page(LogView(self.flytec)), gtk.Label('Log'))
    vbox.pack_start(notebook)
    hbuttonbox = gtk.HButtonBox()
    button = gtk.Button(stock=gtk.STOCK_QUIT)
    button.connect('clicked', self.on_quit)
    hbuttonbox.add(button)
    vbox.pack_end(hbuttonbox, False)
    self.add(vbox)
    self.connect_after('realize', self.after_realize)

  def after_realize(self, data):
    self.set_title('%s %s #%s (%s)' % (self.flytec.manufacturer[2], self.flytec.instrument, self.flytec.serial_number, self.flytec.pilot_name))

  def on_quit(self, data):
    self.destroy()

#
# main
#

if __name__ == '__main__':
  logging.basicConfig(level=logging.INFO)
  op = optparse.OptionParser()
  op.add_option('-d', '--device', dest='device', metavar='DEVICE')
  options, args = op.parse_args()
  flytec = Flytec(POSIXSerialIO(options.device or '/dev/ttyUSB0'))
  window = MainWindow(flytec)
  window.connect('destroy', gtk.main_quit)
  window.show_all()
  gtk.main()

